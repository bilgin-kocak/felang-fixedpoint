// use utils::xor

// use math::u32_wide_mul

// Fixed point 16.16
// 16 bits for the integer part, 16 bits for the fractional part
// 1 bit for the sign
// 


pub struct FP16x16 {
    pub mag: u32
    pub sign: bool
}

const TWO: u32 = 131072 // 2 ** 17
const ONE: u32 = 65536 // 2 ** 16
const HALF: u32 = 32768 // 2 ** 15
const MAX: u32 = 2147483648 // 2 ** 31


pub trait FixedTrait {
    fn new(mag: u32, sign: bool) -> Self;
    fn new_unscaled(mag: u32, sign: bool) -> Self;
    fn one() -> Self;
    fn convert_to_u32(self) -> u32;
    fn abs(self) -> Self;
    fn floor(self) -> Self;
    fn ceil(self) -> Self;
    fn round(self) -> Self;
    fn sign(self) -> bool;
    fn negate(self) -> Self;

    fn add(self, other: Self) -> Self;
    fn sub(self, other: Self) -> Self;
    fn mul(self, other: Self) -> Self;
    fn div(self, other: Self) -> Self;

    fn eq(self, other: Self) -> bool;
    fn ge(self, other: Self) -> bool;
    fn gt(self, other: Self) -> bool;
    fn le(self, other: Self) -> bool;
    fn lt(self, other: Self) -> bool;
    fn ne(self, other: Self) -> bool;

    fn rem(self, other: Self) -> Self;

    fn exp2(self) -> Self;
    fn exp(self) -> Self;
    fn log2(self) -> Self;
    fn log10(self) -> Self;
    fn ln(self) -> Self;
    fn sqrt(self) -> Self;
    fn pow(self, other: Self) -> Self;
}

impl FixedTrait for FP16x16 {
  fn new(mag: u32, sign: bool) -> Self {
    return FP16x16(mag: mag, sign: sign)
  }
  fn new_unscaled(mag: u32, sign: bool) -> Self {
    return FP16x16(mag: mag << 16, sign: sign)
  }
  fn one() -> Self {
    return FP16x16(mag: ONE, sign: false)
  }
  fn convert_to_u32(self) -> u32 {
    return self.mag >> 16
  }
  fn abs(self) -> Self {
    return FP16x16(mag: self.mag, sign: true)
  }
  // You will get floor to the nearest integer
  fn floor(self) -> Self {
    if self.sign {
      return FP16x16(mag: self.mag & 0xFFFF0000 + ONE, sign: self.sign)
    } else {
      return FP16x16(mag: self.mag & 0xFFFF0000, sign: self.sign)
    }
  }
  fn ceil(self) -> Self {
    if self.sign {
      return FP16x16(mag: self.mag & 0xFFFF0000, sign: self.sign)
    } else {
      return FP16x16(mag: self.mag & 0xFFFF0000 + ONE, sign: self.sign)
    }
  }
  fn round(self) -> Self {
    let value: u32 = self.mag & 0x00008000
    if value == 0{
      return FP16x16(mag: self.mag & 0xFFFF0000, sign: self.sign)
    } else {
      return FP16x16(mag: self.mag & 0xFFFF0000 + ONE, sign: self.sign)
    }
  }

  fn add(self, _ other: FP16x16) -> Self {
    if self.sign == other.sign {
      return FP16x16(mag: self.mag + other.mag, sign: self.sign)
    } else {
      if self.mag > other.mag {
        return FP16x16(mag: self.mag - other.mag, sign: self.sign)
      } else {
        return FP16x16(mag: other.mag - self.mag, sign: other.sign)
      }
    }
  }

  fn negate(self) -> Self {
    if self.mag == 0 {
      return FP16x16(mag: 0, sign: false)
    }
    return FP16x16(mag: self.mag, sign: not self.sign)
  }

  fn sub(self, _ other: FP16x16) -> Self {
    return self.add(other.negate())
  }

  fn mul(self, _ other: FP16x16) -> Self {
    let first: u128 = u32_wide_mul(self.mag, other.mag)
    let result : u32 = u32(first / u128(ONE))
    let sign: bool = mul_sign(self.sign, other.sign)

    return FP16x16(mag: result, sign: sign)
  }  

  fn div(self, _ other: FP16x16) -> FP16x16 {
    // Use wide mul for better precision
    let a: u128 = u32_wide_mul(self.mag, ONE);

    let result: u128 = a / u128(other.mag)

    // let first : u32 = self.mag / ONE
    // // Use wide mul for better precision
    // let res: u32 = first / other.mag
    let sign: bool = mul_sign(self.sign, other.sign)

    return FP16x16(mag: u32(result), sign: sign)
  }

  fn eq(self, other: FP16x16) -> bool {
    return self.mag == other.mag and self.sign == other.sign
  }

  fn ge(self, other: FP16x16) -> bool {
    if self.sign == false and other.sign == true {
      return true
    } else if self.sign == true and other.sign == false {
      return false
    } else if self.sign == false and other.sign == false {
      return self.mag >= other.mag
    } else {
      return self.mag <= other.mag
    }
  }

  fn gt(self, other: FP16x16) -> bool {
    if self.sign == false and other.sign == true {
      return true
    } else if self.sign == true and other.sign == false {
      return false
    } else if self.sign == false and other.sign == false {
      return self.mag > other.mag
    } else {
      return self.mag < other.mag
    }
  }

  fn le(self, other: FP16x16) -> bool {
    if self.sign == false and other.sign == true {
      return false
    } else if self.sign == true and other.sign == false {
      return true
    } else if self.sign == false and other.sign == false {
      return self.mag <= other.mag
    } else {
      return self.mag >= other.mag
    }
  }

  fn lt(self, other: FP16x16) -> bool {
    if self.sign == false and other.sign == true {
      return false
    } else if self.sign == true and other.sign == false {
      return true
    } else if self.sign == false and other.sign == false {
      return self.mag < other.mag
    } else {
      return self.mag > other.mag
    }
  }

  fn ne(self, other: FP16x16) -> bool {
    return self.mag != other.mag or self.sign != other.sign
  }

  fn sign(self) -> bool {
    return self.sign
  }

  fn rem(self, other: FP16x16) -> FP16x16 {
    let (a, b): (u32, u32) = u32_divmod(self.mag, other.mag)
    return FP16x16(mag: b, sign: self.sign)
  }

  // Calculates the binary exponent of x: 2^x
  fn exp2(self) -> Self{
    if (self.mag == 0) {
        return FP16x16(mag: ONE, sign: false)
    }
    if (self.mag == ONE) {
        return FP16x16(mag: TWO, sign: false)
    }
    let (int_part, frac_part): (u32, u32) = u32_divmod(self.mag, ONE)

    let int_res: u32 = 2**int_part
    let mut res_u: FP16x16 = FP16x16::new_unscaled(mag: int_res, sign: false)

    if frac_part != 0 {
        let frac: FP16x16 = FP16x16::new(mag: frac_part, sign: false);
        let r7: FP16x16 = FP16x16::new(mag: 1, sign: false).mul(frac);
        let r6: FP16x16 = (r7.add(FP16x16::new(mag: 10, sign: false))).mul(frac);
        let r5: FP16x16 = (r6.add(FP16x16::new(mag: 87, sign: false))).mul(frac);
        let r4: FP16x16 = (r5.add(FP16x16::new(mag: 630, sign: false))).mul(frac);
        let r3: FP16x16 = (r4.add(FP16x16::new(mag: 3638, sign: false))).mul(frac);
        let r2: FP16x16 = (r3.add(FP16x16::new(mag: 15743, sign: false))).mul(frac);
        let r1: FP16x16 = (r2.add(FP16x16::new(mag: 45426, sign: false))).mul(frac);
        res_u = res_u.mul(r1.add(FP16x16::new(mag: ONE, sign: false)));
    }
    return res_u
  }

  // Calculates the natural exponent of x: e^x
  fn exp(self) -> Self{
    return (FP16x16::new(mag: 94548, sign: false).mul(self)).exp2(); // log2(e) * 2^23 â‰ˆ 12102203
  }

  // Calculates the binary logarithm of x: log2(x)
  // self must be greather than zero
  fn log2(self) -> Self {
    assert self.sign == false // log2 is only defined for positive numbers

    if self.mag == ONE {
      return FP16x16(mag: 0, sign: false)
    } else if self.mag < ONE {
      let div: FP16x16 = FP16x16::new(mag: ONE, sign: false).div(self)
      return div.log2().negate()
    }
    let whole: u32 = self.mag / ONE;
    let (msb_, div): (u32, u32) = msb(whole)

    if self.mag == div * ONE {
      return FP16x16::new_unscaled(mag: msb_, sign: false)
    } else {
      let norm: FP16x16 = self.div(FP16x16::new_unscaled(mag: div, sign: false));
      let r8: FP16x16 = FP16x16::new(mag: 596, sign: true).mul(norm);
      let r7: FP16x16 = (r8.add(FP16x16::new(mag: 8116, sign: false))).mul(norm);
      let r6: FP16x16 = (r7.add(FP16x16::new(mag: 49044, sign: true))).mul(norm);
      let r5: FP16x16 = (r6.add(FP16x16::new(mag: 172935, sign: false))).mul(norm);
      let r4: FP16x16 = (r5.add(FP16x16::new(mag: 394096, sign: true))).mul(norm);
      let r3: FP16x16 = (r4.add(FP16x16::new(mag: 608566, sign: false))).mul(norm);
      let r2: FP16x16 = (r3.add(FP16x16::new(mag: 655828, sign: true))).mul(norm);
      let r1: FP16x16 = (r2.add(FP16x16::new(mag: 534433, sign: false))).mul(norm);
      return r1.add(FP16x16::new(mag: 224487, sign: true)).add(FP16x16::new_unscaled(mag: msb_, sign: false));
    }
  }

  // Calculates the base 10 log of x: log10(x)
  // self must be greater than zero
  fn log10(self) -> Self{
    return FP16x16::new(mag: 19728, sign: false).mul(self.log2()); // log10(2) = 0.301...
  }

  // Calculates the natural logarithm of x: ln(x)
  // self must be greater than zero
  fn ln(self) -> Self{
    return FP16x16::new(mag: 45426, sign: false).mul(self.log2()); // ln(2) = 0.693...
  }

  // Calculates the square root of a FP16x16 point value
  // self must be positive
  fn sqrt(self) -> FP16x16{
    assert self.sign == false // sqrt is only defined for positive numbers

    if self.mag == ONE {
      return FP16x16(mag: ONE, sign: false)
    } else if self.mag < ONE {
      let mut res: u32 = 0
      let mut rem: u32 = self.mag
      let mut bit: u32 = ONE << 30 // The second-to-top bit is set: 1 << 30 for 32 bits

      // "bit" starts at the highest power of four <= the argument.
      while bit > rem {
        bit = bit >> 2
      }

      while bit != 0 {
        if rem >= res + bit {
          rem = rem - (res + bit)
          res = (res >> 1) + bit
        } else {
          res = res >> 1
        }
        bit = bit >> 2
      }

      return FP16x16(mag: res, sign: false)
    } else {
      let mut res: u32 = 0
      let mut rem: u32 = self.mag
      let mut bit: u32 = ONE << 30 // The second-to-top bit is set: 1 << 30 for 32 bits

      // "bit" starts at the highest power of four <= the argument.
      while bit > rem {
        bit = bit >> 2
      }

      while bit != 0 {
        if rem >= res + bit {
          rem = rem - (res + bit)
          res = (res >> 1) + bit
        } else {
          res = res >> 1
        }
        bit = bit >> 2
      }

      return FP16x16(mag: res, sign: false)
    }
  }

  // Calculates the power of a FP16x16 point value

  fn pow(self, other: FP16x16) -> FP16x16 {
    assert self.sign == false // pow is only defined for positive numbers

    if self.mag == ONE {
      return FP16x16(mag: ONE, sign: false)
    } else if self.mag < ONE {
      let mut res: u32 = 0
      let mut rem: u32 = self.mag
      let mut bit: u32 = ONE << 30 // The second-to-top bit is set: 1 << 30 for 32 bits

      // "bit" starts at the highest power of four <= the argument.
      while bit > rem {
        bit = bit >> 2
      }

      while bit != 0 {
        if rem >= res + bit {
          rem = rem - (res + bit)
          res = (res >> 1) + bit
        } else {
          res = res >> 1
        }
        bit = bit >> 2
      }

      return FP16x16(mag: res, sign: false)
    } else {
      let mut res: u32 = 0
      let mut rem: u32 = self.mag
      let mut bit: u32 = ONE << 30 // The second-to-top bit is set: 1 << 30 for 32 bits

      // "bit" starts at the highest power of four <= the argument.
      while bit > rem {
        bit = bit >> 2
      }

      while bit != 0 {
        if rem >= res + bit {
          rem = rem - (res + bit)
          res = (res >> 1) + bit
        } else {
          res = res >> 1
        }
        bit = bit >> 2
      }

      return FP16x16(mag: res, sign: false)
    }

  }

  // fn log2(self) -> Self {
  //   assert self.sign == false // log2 is only defined for positive numbers

  //   if self.mag == ONE {
  //     return FP16x16(mag: 0, sign: false)
  //   } else if self.mag < ONE {

  //   }
  // }
}
// HELPER Functions
//-------------------------------------------------------------------------


pub fn u32_wide_mul(_ a: u32, _ b: u32) -> u128{
    return u128(a) * u128(b)

}
pub fn u32_divmod(_ a: u32, _ b: u32) -> (u32, u32) {
    return (a / b, a % b)
}

pub fn xor(_ a: bool, _ b: bool) -> bool {
    if a == b {
        return true;
    } else {
        return false;
    }
}

pub fn mul_sign(_ a: bool, _ b: bool) -> bool{
    if a == b {
        return false;
    } else {
        return true;
    }
}

// Calculates the most significant bit
pub fn msb(_ whole: u32) -> (u32, u32) {
    if whole < 256 {
        if whole < 2 {
            return (0, 1);
        }
        if whole < 4 {
            return (1, 2);
        }
        if whole < 8 {
            return (2, 4);
        }
        if whole < 16 {
            return (3, 8);
        }
        if whole < 32 {
            return (4, 16);
        }
        if whole < 64 {
            return (5, 32);
        }
        if whole < 128 {
            return (6, 64);
        }
        if whole < 256 {
            return (7, 128);
        }
    } else if whole < 65536 {
        if whole < 512 {
            return (8, 256);
        }
        if whole < 1024 {
            return (9, 512);
        }
        if whole < 2048 {
            return (10, 1024);
        }
        if whole < 4096 {
            return (11, 2048);
        }
        if whole < 8192 {
            return (12, 4096);
        }
        if whole < 16384 {
            return (13, 8192);
        }
        if whole < 32768 {
            return (14, 16384);
        }
        if whole < 65536 {
            return (15, 32768);
        }
    }

    return (16, 65536);
}
