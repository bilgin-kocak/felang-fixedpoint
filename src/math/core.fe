/// Trait
///
/// new - Constructs a new fixed point instance.
/// new_unscaled - Creates a new fixed point instance with the specified unscaled magnitude and sign.
/// from_felt - Creates a new fixed point instance from a felt252 value.
/// abs - Returns the absolute value of the fixed point number.
/// ceil - Returns the smallest integer greater than or equal to the fixed point number.
/// exp - Returns the value of e raised to the power of the fixed point number.
/// exp2 - Returns the value of 2 raised to the power of the fixed point number.
/// floor - Returns the largest integer less than or equal to the fixed point number.
/// ln - Returns the natural logarithm of the fixed point number.
/// log2 - Returns the base-2 logarithm of the fixed point number.
/// log10 - Returns the base-10 logarithm of the fixed point number.
/// pow - Returns the result of raising the fixed point number to the power of another fixed point number.
/// round - Rounds the fixed point number to the nearest whole number.
/// sqrt - Returns the square root of the fixed point number.
/// acos - Returns the  arccosine (inverse of cosine) of the fixed point number.
/// acos_fast - Returns the  arccosine (inverse of cosine) of the fixed point number faster with LUT.
/// asin - Returns the  arcsine (inverse of sine) of the fixed point number.
/// asin_fast - Returns the  arcsine (inverse of sine) of the fixed point number faster with LUT.
/// atan - Returns the arctangent (inverse of tangent) of the input fixed point number.
/// atan_fast - Returns the arctangent (inverse of tangent) of the input fixed point number faster with LUT.
/// cos - Returns the cosine of the fixed point number.
/// cos_fast - Returns the cosine of the fixed point number fast with LUT.
/// sin - Returns the sine of the fixed point number.
/// sin_fast - Returns the sine of the fixed point number faster with LUT.
/// tan - Returns the tangent of the fixed point number.
/// tan_fast - Returns the tangent of the fixed point number faster with LUT.
/// acosh - Returns the value of the inverse hyperbolic cosine of the fixed point number.
/// asinh - Returns the value of the inverse hyperbolic sine of the fixed point number.
/// atanh - Returns the value of the inverse hyperbolic tangent of the fixed point number.
/// cosh - Returns the value of the hyperbolic cosine of the fixed point number.
/// sinh - Returns the value of the hyperbolic sine of the fixed point number.
/// tanh - Returns the value of the hyperbolic tangent of the fixed point number.
/// sign - Returns the element-wise indication of the sign of the input fixed point number.
/// 


pub trait NumberTrait {
    fn abs(self) -> Self;
    // fn exp(self) -> Self;
}

impl NumberTrait for u8 {
  fn abs(self) -> Self {
    return self
  }
}

impl NumberTrait for u16 {
  fn abs(self) -> Self {
    return self
  }
}

impl NumberTrait for u32 {
  fn abs(self) -> Self {
    return self
  }
}

impl NumberTrait for u64 {
  fn abs(self) -> Self {
    return self
  }
}

impl NumberTrait for u128 {
  fn abs(self) -> Self {
    return self
  }
}

impl NumberTrait for u256 {
  fn abs(self) -> Self {
    return self
  }
}

impl NumberTrait for i8 {
  fn abs(self) -> Self {
    return -1 * self
  }
}

impl NumberTrait for i16 {
  fn abs(self) -> Self {
    return -1 * self
  }
}

impl NumberTrait for i32 {
  fn abs(self) -> Self {
    return -1 * self
  }
}

impl NumberTrait for i64 {
  fn abs(self) -> Self {
    return -1 * self
  }
}

impl NumberTrait for i128 {
  fn abs(self) -> Self {
    return -1 * self
  }
}

impl NumberTrait for i256 {
  fn abs(self) -> Self {
    return -1 * self
  }
}





pub fn add(_ x: u256, _ y: u256) -> u256 {
    return x + y
} 


#test
fn test_abs() {
    let a: u256 = 1;
    let b: u256 = a.abs();
    assert b == 1

    let c: i256 = -1;
    let d: i256 = c.abs();
    assert d == 1
}